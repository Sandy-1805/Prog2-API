openapi: 3.0.0
info:
  title: API Gestion des Profils Utilisateurs
  version: 1.0.0
  description: API pour la gestion des profils utilisateurs

paths:
  /users:
    get:
      tags:
        - Users
      summary: Liste tous les profils utilisateurs
      description: Retourne la liste de tous les profils utilisateurs
      responses:
        '200':
          description: Liste des profils utilisateurs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserProfile'
              examples:
                usersList:
                  summary: Exemple de liste d'utilisateurs
                  value:
                    - identifier: "user-123"
                      first_name: "Jean"
                      last_name: "Dupont"
                      birthdate: "1990-05-15"
                      email: "jean.dupont@email.com"
                      address_street: "123 Rue de la Paix"
                      address_city: "Paris"
                      address_country: "France"
                      address_postal_code: "75001"
                      needs_newsletter: true
                      language: "fr"
                    - identifier: "user-456"
                      first_name: "Marie"
                      last_name: "Martin"
                      birthdate: "1985-12-20"
                      email: "marie.martin@email.com"
                      address_street: "456 Avenue des Champs"
                      address_city: "Lyon"
                      address_country: "France"
                      address_postal_code: "69002"
                      needs_newsletter: false
                      language: "fr"

    post:
      tags:
        - Users
      summary: Crée un nouveau profil utilisateur
      description: Crée un nouveau profil utilisateur sans identifiant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserProfile'
            examples:
              newUser:
                summary: Exemple de création d'utilisateur
                value:
                  first_name: "Sophie"
                  last_name: "Leroy"
                  birthdate: "1992-08-10"
                  email: "sophie.leroy@email.com"
                  address_street: "789 Boulevard Voltaire"
                  address_city: "Marseille"
                  address_country: "France"
                  address_postal_code: "13001"
                  needs_newsletter: true
                  language: "fr"
      responses:
        '201':
          description: Profil utilisateur créé avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
              examples:
                createdUser:
                  summary: Exemple d'utilisateur créé
                  value:
                    identifier: "user-789"
                    first_name: "Sophie"
                    last_name: "Leroy"
                    birthdate: "1992-08-10"
                    email: "sophie.leroy@email.com"
                    address_street: "789 Boulevard Voltaire"
                    address_city: "Marseille"
                    address_country: "France"
                    address_postal_code: "13001"
                    needs_newsletter: true
                    language: "fr"

  /users/{id}:
    parameters:
      - $ref: '#/components/parameters/userIdParam'
    
    get:
      tags:
        - Users
      summary: Récupère un profil utilisateur par son ID
      description: Retourne le profil utilisateur correspondant à l'identifiant fourni
      responses:
        '200':
          description: Profil utilisateur trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '404':
          description: Utilisateur non trouvé
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not found"

    put:
      tags:
        - Users
      summary: Met à jour complètement un profil utilisateur
      description: Remplace toutes les informations du profil utilisateur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
      responses:
        '200':
          description: Profil utilisateur mis à jour avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'

  /users/{id}/personal-info:
    parameters:
      - $ref: '#/components/parameters/userIdParam'
    
    put:
      tags:
        - Users
      summary: Met à jour les informations personnelles
      description: Met à jour uniquement les informations personnelles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonalInfoUpdate'
            examples:
              updatePersonalInfo:
                summary: Exemple de mise à jour des infos personnelles
                value:
                  first_name: "Jean-Pierre"
                  last_name: "Dupont"
                  birthdate: "1990-05-16"
                  email: "jeanpierre.dupont@email.com"
      responses:
        '200':
          description: Informations personnelles mises à jour avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'

  /users/{id}/address:
    parameters:
      - $ref: '#/components/parameters/userIdParam'
    
    put:
      tags:
        - Users
      summary: Met à jour l'adresse
      description: Met à jour uniquement l'adresse de l'utilisateur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressUpdate'
            examples:
              updateAddress:
                summary: Exemple de mise à jour d'adresse
                value:
                  address_street: "321 Nouvelle Rue"
                  address_city: "Lille"
                  address_country: "France"
                  address_postal_code: "59000"
      responses:
        '200':
          description: Adresse mise à jour avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'

  /users/{id}/preferences:
    parameters:
      - $ref: '#/components/parameters/userIdParam'
    
    put:
      tags:
        - Users
      summary: Met à jour les préférences
      description: Met à jour uniquement les préférences
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PreferencesUpdate'
            examples:
              updatePreferences:
                summary: Exemple de mise à jour des préférences
                value:
                  needs_newsletter: false
                  language: "eng"
      responses:
        '200':
          description: Préférences mises à jour avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'

components:
  parameters:
    userIdParam:
      name: id
      in: path
      required: true
      description: Identifiant unique de l'utilisateur
      schema:
        type: string
        pattern: "^user-[a-zA-Z0-9]+$"
      example: "user-123"

  schemas:
    BaseUserProfile:
      type: object
      properties:
        first_name:
          type: string
          example: "Jean"
        last_name:
          type: string
          example: "Dupont"
        birthdate:
          type: string
          format: date
          example: "1990-05-15"
        email:
          type: string
          format: email
          example: "jean.dupont@email.com"
        address_street:
          type: string
          example: "123 Rue de la Paix"
        address_city:
          type: string
          example: "Paris"
        address_country:
          type: string
          example: "France"
        address_postal_code:
          type: string
          pattern: "^[0-9]{5}$"
          example: "75001"
        needs_newsletter:
          type: boolean
          example: true
        language:
          type: string
          enum: ["mg", "fr", "eng"]
          example: "fr"
      required:
        - first_name
        - last_name
        - birthdate
        - email
        - address_street
        - address_city
        - address_country
        - address_postal_code
        - needs_newsletter
        - language

    UserProfile:
      allOf:
        - $ref: '#/components/schemas/BaseUserProfile'
        - type: object
          properties:
            identifier:
              type: string
              example: "user-123"
          required:
            - identifier

    CreateUserProfile:
      allOf:
        - $ref: '#/components/schemas/BaseUserProfile'
        - type: object
          properties:
            identifier:
              not: {}
          required: []

    PersonalInfoUpdate:
      type: object
      properties:
        first_name:
          type: string
          example: "Jean-Pierre"
        last_name:
          type: string
          example: "Dupont"
        birthdate:
          type: string
          format: date
          example: "1990-05-16"
        email:
          type: string
          format: email
          example: "jeanpierre.dupont@email.com"

    AddressUpdate:
      type: object
      properties:
        address_street:
          type: string
          example: "321 Nouvelle Rue"
        address_city:
          type: string
          example: "Lille"
        address_country:
          type: string
          example: "France"
        address_postal_code:
          type: string
          pattern: "^[0-9]{5}$"
          example: "59000"

    PreferencesUpdate:
      type: object
      properties:
        needs_newsletter:
          type: boolean
          example: false
        language:
          type: string
          enum: ["mg", "fr", "eng"]
          example: "eng"